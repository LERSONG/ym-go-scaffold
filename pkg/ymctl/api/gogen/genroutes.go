package gogen

import (
	"fmt"
	"github.com/tal-tech/go-zero/tools/goctl/api/spec"
	"github.com/tal-tech/go-zero/tools/goctl/util"
	"github.com/tal-tech/go-zero/tools/goctl/util/stringx"
	"os"
	"path"
	"strings"
)

const (
	routesFilename = "routes"
	routesTemplate = `// Code generated by ymctl. DO NOT EDIT.
package handler

import (
	{{.importPackages}}
)

func RegisterHandlers(srv *server.{{.server}}Server) {
	{{.routesAdditions}}
}
`
)

var mapping = map[string]string{
	"delete": "http.MethodDelete",
	"get":    "http.MethodGet",
	"head":   "http.MethodHead",
	"post":   "http.MethodPost",
	"put":    "http.MethodPut",
	"patch":  "http.MethodPatch",
}

type (
	group struct {
		routes []route
	}
	route struct {
		method  string
		path    string
		handler string
	}
)

func genRoutes(dir string, api *spec.ApiSpec) error {
	serviceName := strings.ToLower(api.Service.Name)
	if strings.HasSuffix(serviceName, "-api") {
		serviceName = strings.ReplaceAll(serviceName, "-api", "")
	}
	server := stringx.From(serviceName).ToCamel()

	groups, err := getRoutes(api)
	if err != nil {
		return err
	}
	var builder strings.Builder
	for _, g := range groups {
		for _, r := range g.routes {
			fmt.Fprintf(&builder, "srv.%s(\"%s\", %s)\n",
				r.method, r.path, r.handler)
		}
	}

	parentPkg, err := getParentPackage(dir)
	if err != nil {
		return err
	}

	var serverImport = "\"" + util.JoinPackages(parentPkg, serverDir) + "\""

	routeFilename := routesFilename + ".go"

	filename := path.Join(dir, handlerDir, routeFilename)
	os.Remove(filename)

	return genFile(fileGenConfig{
		dir:             dir,
		subdir:          handlerDir,
		filename:        routeFilename,
		templateName:    "routesTemplate",
		category:        "",
		templateFile:    "",
		builtinTemplate: routesTemplate,
		data: map[string]string{
			"importPackages":  serverImport,
			"routesAdditions": strings.TrimSpace(builder.String()),
			"server":          server,
		},
	})
}

func getRoutes(api *spec.ApiSpec) ([]group, error) {
	var routes []group

	for _, g := range api.Service.Groups {
		var groupedRoutes group
		for _, r := range g.Routes {
			handler := getHandlerName(r)
			handler = handler + "(srv.SvcCtx)"
			folder := r.GetAnnotation(groupProperty)
			if len(folder) > 0 {
				handler = toPrefix(folder) + "." + strings.ToUpper(handler[:1]) + handler[1:]
			} else {
				folder = g.GetAnnotation(groupProperty)
				if len(folder) > 0 {
					handler = toPrefix(folder) + "." + strings.ToUpper(handler[:1]) + handler[1:]
				}
			}
			groupedRoutes.routes = append(groupedRoutes.routes, route{
				method:  strings.ToUpper(r.Method),
				path:    r.Path,
				handler: handler,
			})
		}
		routes = append(routes, groupedRoutes)
	}

	return routes, nil
}

func toPrefix(folder string) string {
	return strings.ReplaceAll(folder, "/", "")
}
